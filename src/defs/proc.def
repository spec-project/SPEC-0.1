%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPEC                                                                     
% Copyright (C) 2011 Alwen Tiu                                             
%
% This program is free software; you can redistribute it and/or modify     
% it under the terms of the GNU General Public License as published by     
% the Free Software Foundation; either version 2 of the License, or        
% (at your option) any later version.                                      
%
% This program is distributed in the hope that it will be useful,          
% but WITHOUT ANY WARRANTY; without even the implied warranty of           
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
% GNU General Public License for more details.                             
%
% You should have received a copy of the GNU General Public License        
% along with this code; if not, write to the Free Software Foundation,     
% Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include "uni.def".
#include "spi.def".
#include "pprint.def".

simplify zero zero.
simplify (par P1 P2) Q := 
  simplify P1 Q1,
  simplify P2 Q2,
  _if (Q1 = zero) 
      (Q = Q2) 
      (
       _if (Q2 = zero)
           (Q = Q1)
           (Q = (par Q1 Q2))
      ).

simplify (nu x\ P x) Q :=
  (nabla x\ simplify (P x) (R x)), 
  _if (R = (x\ S))
      (Q = S)
      (Q = (nu R)).
simplify (match X Y P) Q :=
  simplify P R,
  _if (R = zero)
      (Q = zero)
      (Q = (match X Y R)).
simplify (inp A P) Q :=
  (nabla x\ simplify (P x) (R x)),
  Q = (inp A R). 
simplify (outp A M P) Q :=
  simplify P R,
  Q = (outp A M R).
simplify (case M N P) Q :=
  (nabla x\ simplify (P x) (R x)),
  _if (R = (x\ S))
      (Q = S)
      (Q = (case M N R)).
simplify (let M (x\y\ P x y)) Q :=
  (nabla x\ nabla y\ simplify (P x y) (R x y)),
  _if (R = (x\y\ S))
      (Q = S)
      (Q = (let M R)).
simplify (bang P) Q := 
  simplify P R,
  _if (R = zero)
      (Q = zero)
      (Q = (bang R)).

#type print_proc_aux (proc -> o).

print_proc_aux P := 
  _if (P = (par Q R)) 
      ( print "(", print_proc P, print ")")
      ( print_proc P ). 

#type print_nu_proc (proc -> o).

print_nu_proc P :=
  _not(P = (nu Q)), print ").", 
  print_proc_aux P. 

print_nu_proc (nu x\ P x) :=
  nabla x\
  print x,
  _if (P (bn x) = (nu (R x))) (print ",") (true),
  print_nu_proc (P (bn x)).

print_proc (def A L) := 
  print A, 
  _if (L = nil) (true) (print "{", plist L, print "}"). 
print_proc zero := print "0".
print_proc (par P Q) :=
   print_proc P, print " | ", print_proc Q. 
print_proc (nu x\ P x) :=
  print "nu(", print_nu_proc (nu x\ P x).

print_proc (match X Y P) :=
  print "[", print_term X, print " = ", print_term Y, print "]",
  print_proc_aux P. 

print_proc (inp A (x\ P x)) :=
  print_term A, print "(", 
  nabla x\ print x, print ").", 
  print_proc_aux (P (bn x)). 

print_proc (outp A M P) :=
  print_term A, print "<", print_term M, print ">.", 
  print_proc_aux P. 

print_proc (case M N (x\P x)) :=
  print "case ", print_term M, print " of ", 
  nabla x\ 
    print "enc(", print x, print ",", print_term N, print ") in ", 
    print_proc_aux (P (bn x)).

print_proc (let M (x\y\ P x y)) :=
  print "let ", print_term M, print " = ", 
  nabla x\ nabla y\ print "<", print x, print ",", print y, print "> in ",
    print_proc_aux (P (bn x) (bn y)). 

print_proc (bang P) :=
  print "!", print "(", print_proc P, print ")".
 
print_agent (con M P) :=
  print "<", print_term M, print ">", print_proc P.
print_agent (abs x\P x) :=
  print "(", nabla x\ print x, print ")", print_proc (P (bn x)).
print_agent (new x\P x) := 
  print "new ", nabla x\ print x, print ".", print_agent (P (bn x)).

% print_agent_header (con M P) := print "< ", print_term M, print " >".
% print_agent_header (abs x\P x) :=
%   print "( )". 
% print_agent_header (new x\P x) := 
%   print "new ", nabla x\ print x, print ".", print_agent_header (P (bn x)).

print_act tau := print "tau".
print_act (act M) := print_term M. 

copyproc L zero zero.
copyproc L (par P Q) (par S T) :=
  copyproc L P S, copyproc L Q T.
copyproc L (nu x\P x) (nu x\Q x) :=
  nabla x\ copyproc L (P (bn x)) (Q x).
copyproc L (match X Y P) (match U V Q) :=
  copyterm L X U, copyterm L Y V, copyproc L P Q.
copyproc L (inp A (x\ P x)) (inp B (x\ Q x)) :=
  copyterm L A B, nabla x\ copyproc L (P (bn x)) (Q x).
copyproc L (outp A M P) (outp B N Q) :=
  copyterm L A B, copyterm L M N, copyproc L P Q.
copyproc L (case M N (x\ P x)) (case U V (x\ Q x)) :=
  copyterm L M U, copyterm L N V,
  nabla x\ copyproc L (P (bn x))  (Q x).
copyproc L (let M (x\y\P x y)) (let N (x\y\ Q x y)) := 
  copyterm L M N,
  nabla x\ nabla y\ copyproc L (P (bn x) (bn y)) (Q x y).
copyproc L (bang P) (bang Q) := copyproc L P Q.

copyagent L (abs x\ P x) (abs x\ Q x) :=
  nabla x\ copyproc L (P (bn x)) (Q x).
copyagent L (new x\ P x) (new x\ Q x) :=
  nabla x\ copyagent L (P (bn x)) (Q x).
copyagent L (con M P) (con N Q) :=
  copyterm L M N, copyproc L P Q.

copyact L tau tau.
copyact L (act M) (act N) := copyterm L M N.

#type flex_subst (list tm -> list sub_pair -> o).

flex_subst nil nil. 
flex_subst (cons (var V) Vs) (cons (sub (var V) X) Sub) := 
  flex_subst Vs Sub. 

% domain nil nil.
% domain (cons (sub V T) L) (cons V R) := domain L R.

#type concretize (list sub_pair -> o). 

concretize nil.
concretize (cons (sub (var V) T) L) :=
  _if ((var V) = T)
      (concretize L)
      (concretize L).

% c_one takes a list of 'concrete' free variables Vs, a concrete process P
% and return a 'continuation' Cts, i.e., a triple x1\..\xn\(A, Q, Sub)
% where P --A--> Q, with Sub the resulting substitution to Vs,
% and x1 .. xn are new variables introduced in Sub.
%
% We use the following constructors to encode continuations:
%
% contProc  : action -> process -> substitution -> continuation
% contAgent : action -> agent -> substitution -> continuation
% abscont_var   : (tm -> continuation) -> continuation.

#type abscont_var ((tm -> continuation) -> continuation). 
#type apply_var (continuation -> continuation -> o).

apply_var (contProc A P Sub) (contProc A P Sub).
apply_var (contAgent A P Sub) (contAgent A P Sub).
apply_var (abscont_var C1) (abscont C2) :=
  nabla x\ apply_var (C1 (var x)) (C2 x). 

c_one Vs P Cont :=
  flex_subst Vs FSub, 
  copyproc FSub P P1, % replace all var-terms with logic variables 
  one P1 A Q,
  concretize FSub,   
  _abstract (contProc A Q FSub) abscont_var Cont1,
  apply_var Cont1 Cont.


c_oneAbs Vs P Cont  := 
  flex_subst Vs FSub, 
  copyproc FSub P P1, 
  oneAbs P1 A Q,
  concretize FSub,  
  _abstract (contAgent A Q FSub) abscont_var Cont1,
  apply_var Cont1 Cont.

 
c_oneCon Vs P Cont := 
  flex_subst Vs FSub, 
  copyproc FSub P P1, 
  oneCon P1 A Q,
  concretize FSub,
  _abstract (contAgent A Q FSub) abscont_var Cont1,
  apply_var Cont1 Cont.

