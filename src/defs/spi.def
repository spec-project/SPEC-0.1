%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPEC                                                                     
% Copyright (C) 2011 Alwen Tiu                                             
%
% This program is free software; you can redistribute it and/or modify     
% it under the terms of the GNU General Public License as published by     
% the Free Software Foundation; either version 2 of the License, or        
% (at your option) any later version.                                      
%
% This program is distributed in the hope that it will be useful,          
% but WITHOUT ANY WARRANTY; without even the implied warranty of           
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
% GNU General Public License for more details.                             
%
% You should have received a copy of the GNU General Public License        
% along with this code; if not, write to the Free Software Foundation,     
% Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% This implementation uses the definition of the operational semantics
% by Abadi and Gordon. See the following paper for details
%   
%   Martin Abadi and Andrew Gordon. "A calculus for cryptographic protocols:
%   The spi calculus". Information and Computation 148, 1 - 70 (1999)
%
%  
% Process constructors:
% par : proc -> proc -> proc.
% nu  : (tm -> proc) -> proc.
% match : tm -> tm -> proc -> proc.
% inp: tm -> (tm -> proc) -> proc.
% outp : tm -> tm -> proc -> proc.
% zero : proc.
% case : tm -> tm -> (tm -> proc) -> proc.
%   e.g., [case L of {x}_k in Px] is translated to (case L k (x\Px)).
% let : tm -> (tm -> tm -> proc) -> proc.
%   e.g., [let (x,y) = M in Pxy] becomes (let M (x\y\Pxy).
%
% agents:
% abs : (tm -> proc) -> agent.
% con : tm -> proc -> agent.
% new : (tm -> agent) -> agent.
%
% Terms:
% en : tm -> tm -> tm.  (encryption)
%   e.g., {M}_k is encoded as (en M k).
% pr : tm -> tm -> tm.  (pairing)
% nm : tm -> tm. (names)
% 
% For simplicity, in this implementation we use only the encryption 
% constructor and pairing; natural numbers constructors are not implemented.
% But it is easy to add them.
%
% Actions:
% tau : action.
% act : tm -> action.
%
% Transitions:
% red_proc : proc -> proc -> o.
% one : proc -> action -> proc -> o.     (free-action transitions)
% oneAbs : proc -> action -> agent -> o. (abstractions)
% oneCon : proc -> action -> agent -> o. (concretions)
% appAbs : agent -> agent -> proc -> o.
% appCon : agent -> agent -> proc -> o.


red_proc (match X X P) P.
red_proc (let (pr M N) P) R := R = (P M N).
red_proc (case (en M K) K P) R := R = (P M).

appAbs (abs M) (con X Q) R := R = (par (M X) Q).
appAbs (abs M) (new A) (nu R) := nabla x\ appAbs (abs M) (A x) (R x).

appCon (con X Q) (abs M) R := R = (par Q (M X)).
appCon (new A) (abs M) (nu R) := nabla x\ appCon (A x) (abs M) (R x).

one (par P Q) tau R := sigma x\ oneAbs P x F, oneCon Q x C, appAbs F C R.
one (par P Q) tau R := sigma x\ oneCon P x C, oneAbs Q x F, appCon C F R.
one (nu P) tau (nu R) := nabla x\ one (P x) tau (R x).
one (bang P) tau (par (bang P) Q) := one P tau Q.
one P tau R := red_proc P Q, one Q tau R.

oneAbs (inp X A) (act X) (abs A).
oneAbs P X (abs M) := red_proc P Q, oneAbs Q X (abs M).
oneAbs (par P Q) X (abs x\(par (R x) Q)) := oneAbs P X (abs R).
oneAbs (par P Q) X (abs x\(par P (R x))) := oneAbs Q X (abs R).
oneAbs (nu P) A (abs x\(nu (R x))) := nabla y\ oneAbs (P y) A (abs x\(R x y)).
oneAbs (bang P) A (abs x\ (par (bang P) (Q x))) := oneAbs P A (abs Q).


mergeRight (con X P) Q (con X (par P Q)).
mergeRight (new C) Q (new R) := nabla x\ mergeRight (C x) Q (R x).

mergeLeft (con X P) Q (con X (par Q P)).
mergeLeft (new C) Q (new R) := nabla x\ mergeLeft (C x) Q (R x).

oneCon (outp X M P) (act X) (con M P).
oneCon P X C := red_proc P Q, oneCon Q X C.
oneCon (par P Q) X R := oneCon P X C, mergeRight C Q R.
oneCon (par P Q) X R := oneCon Q X C, mergeLeft C P R.
oneCon (nu P) X (new R) := nabla y\ oneCon (P y) X (R y).
oneCon (bang P) X R := oneCon P X C, mergeLeft C (bang P) R.

